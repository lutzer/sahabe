--------------------------------
SAHABE RASPBERRY PI INSTALLATION
--------------------------------


SYSTEM INSTALLATION
-------------------

# Prepare SD Card
1. Download Arch linux image and use apple pi-baker to transfer image to sd card
2. Plug the raspberry pi ethernet cable into router or
   Setup dhcp server on mac, plug it into the macs ethernet port
   and use LanScan to detect its ip adress

# Change keyboard and timezone Settings
1. set german keyboard: localectl set-keymap --no-convert de 
2. set berlin timezone: nano ~/.bashrc: TZ='Europe/Berlin'; export TZ 

(# setup fixed ip address)
1. edit /etc/netctlt/etho0
2. comment ip=dhcp line
3. add:
	IP=static
	Address='192.168.1.10/24'
	Gateway='192.168.1.1'
	DNS=('192.168.1.1')

# resize partition
1. http://gleenders.blogspot.de/2014/03/raspberry-pi-resizing-sd-card-root.html

# setup hostname and timeserver
1. change hostname: sudo nano /etc/hostname
2. enable ntpd: systemctl enable ntpd

# Login thorugh ssh and create user accounts
1. type ssh root@ip password is root
2. change root password (to <rootpw>): passwd
3. create new user account: useradd -m pi -> passwd pi <userpasswd>

# Install Sudo
1. update pacman: pacman -Syy
2. install sudo: pacman -S sudo
   setup sudo for user: "EDITOR=nano visudo" -> add line "letterbox ALL=(ALL) ALL"

# Install python
1. sudo pacman -S python2
2. sudo pacman -S python2-pip
3. sudo pip2 install flask

4. # install additional python packages
1. sudo pip2 install flask-login

# Setup NGINX webserver
1. sudo pacman -S nginx
2. enable automatic startup: systemctl enable nginx
3. configure nano /etc/nginx/nginx.conf:
	-add root parameter to server:
		server {
	        listen       80;
	        server_name  localhost;
	        root    /home/pi/http;
	-remove all other root directives in locations
4. chmod 755 home,pi and http directory

# Install uwsgi server for python support (https://wiki.archlinux.org/index.php/Uwsgi)
1. add to nginx conf:
	http {
		location /api/ {
			# forward location to uwsgi python server
    			include uwsgi_params;
    			uwsgi_pass 127.0.0.1:8080;
    			
    			# uwsgi_modifier1 removes SCRIPT_NAME from PATH_INFO
			uwsgi_modifier1 30;
    			uwsgi_param SCRIPT_NAME /api;
		}
	}

2. sudo pip2 install uwsgi
3. to test: 
	uwsgi --socket 127.0.0.1:8080 -w wsgi:app or
	uwsgi --socket 127.0.0.1:8080 --wsgi-file wsgi.py --callable app
	(wsgi.py is python script name to start app)
	
	wsgi.py content:
		from flask import Flask
		app = Flask(__name__)

		@app.route("/")
		def hello():
		    return "Hello!"

		if __name__ == "__main__":
		    app.run()
		    
4. create uwsgi ini script: nano /etc/uswgi/sahabe.ini:
	[uwsgi]
	socket = 127.0.0.1:8080
	chdir = /home/httpd/sahabe
	module = wsgi:app
5. write systemctl unit in /etc/systemd/system/sahabe.uwsgi.service:

	[Unit]
	Description=uWSGI Emperor
	After=syslog.target
	
	[Service]
	ExecStart=/bin/uwsgi --ini /etc/uwsgi/sahabe.ini
	Restart=always
	KillSignal=SIGQUIT
	Type=notify
	StandardError=syslog
	NotifyAccess=all
	
	[Install]
	WantedBy=multi-user.target
	
6. enable startup: sudo systemctl enable sahabe.uwsgi.service

# install mysql
1. sudo pacman -S mariadb
2. sudo pacman -S mysql-python
3. systemctl start mysqld
   mysql_secure_installation -> mariadb root password: <mysqlpassword>
   systemctl restart mysqld
   systemctl enable mysqld
4. login to mariadb: mysql -u root -p
   -> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.72.%' IDENTIFIED BY '<mysqlpassword>' WITH GRANT OPTION;
5. minimize memory usage: cp /usr/share/mysql/my-small.cnf /etc/mysql/my.cnf




